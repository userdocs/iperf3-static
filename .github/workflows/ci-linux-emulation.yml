name: ci - linux binary emulation build

on:
  workflow_call:
    outputs:
      release_tags:
        value: ${{ jobs.build.outputs.release_tags }}
    inputs:
      source_repo:
        type: string
        required: true
      source_branch:
        type: string
        required: true

env:
  GH_TOKEN: "${{ github.TOKEN }}"

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      release_tags: ${{ steps.release_tags.outputs.release_tag }}
    strategy:
      fail-fast: false
      matrix:
        name: [iperf3]
        os_id: [alpine]
        os_version_id: [edge]
        arch: [amd64, arm32v6, arm32v7, arm64v8, i386, ppc64le, riscv64, s390x]
        include:
          - arch: amd64
            platform: linux/amd64

          - arch: arm32v6
            platform: linux/arm/v6

          - arch: arm32v7
            platform: linux/arm/v7

          - arch: arm64v8
            platform: linux/arm64

          - arch: i386
            platform: linux/i386

          - arch: ppc64le
            platform: linux/ppc64le

          - arch: riscv64
            platform: linux/riscv64

          - arch: s390x
            platform: linux/s390x

    name: ${{ matrix.name }} ${{ matrix.os_id }}:${{ matrix.os_version_id }} ${{ matrix.arch }}

    env:
      CDN: http://dl-cdn.alpinelinux.org/alpine/edge/main/
      CXXFLAGS: "--static -static"
      CPPFLAGS: "--static -static"
      LDFLAGS: "--static -static"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Host - phased update
        run: printf '%s\n' 'APT::Get::Always-Include-Phased-Updates "false";' | sudo tee /etc/apt/apt.conf.d/99-phased-updates

      - name: Host - update
        run: sudo apt-get update

      # - name: Host - upgrade
      #   run: sudo apt-get -y upgrade

      - name: Host - set up qemu-user-static binfmt-support
        run: sudo apt install libpipeline1 qemu-user-static binfmt-support

      - name: Create docker multiarch ${{ matrix.platform }} container
        run: docker run --name multiarch -it -d -w /root -e CXXFLAGS="${{ env.CXXFLAGS }}" -e CPPFLAGS="${{ env.CPPFLAGS }}" -e LDFLAGS="${{ env.LDFLAGS }}" --platform ${{ matrix.platform }} -v ${{ github.workspace }}:/root ${{ matrix.arch }}/${{ matrix.os_id }}:${{ matrix.os_version_id }}

      - name: Run apk update
        run: docker exec multiarch apk update --repository=${{ env.CDN }}

      - name: Run apk upgrade
        run: docker exec multiarch apk upgrade --repository=${{ env.CDN }}

      - name: Run apk to install the core build dependencies
        run: docker exec multiarch apk add build-base pkgconf autoconf automake curl libtool git tar curl perl openssl-dev openssl-libs-static linux-headers

      - name: Git clone ${{ matrix.name }}
        run: docker exec multiarch git clone --no-tags --single-branch --branch "${{ inputs.source_branch }}" --shallow-submodules --recurse-submodules -j"$(nproc)" --depth 1 "${{ inputs.source_repo }}" /root/${{ matrix.name }}

      - name: Configure ${{ matrix.name }}
        run: docker exec -w /root/${{ matrix.name }} multiarch ./configure --disable-shared --with-openssl=/usr --enable-static-bin --prefix=/root

      - name: Make Build ${{ matrix.name }}
        run: docker exec -w /root/${{ matrix.name }} multiarch make -j$(nproc)

      - name: Make Install Build ${{ matrix.name }}
        run: docker exec -w /root/${{ matrix.name }} multiarch make install

      - name: Rename ${{ matrix.name }} to ${{ matrix.name }}-${{ matrix.arch }}
        run: docker exec multiarch mv -f /root/bin/${{ matrix.name }} /root/${{ matrix.name }}-${{ matrix.arch }}

      - name: Create path to binary env
        run: printf '%s\n' "binary_path=${{ github.workspace }}/${{ matrix.name }}-${{ matrix.arch }}" >> $GITHUB_ENV

      - name: VirusTotal Scan
        id: virustotal
        uses: crazy-max/ghaction-virustotal@v4
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          files: ${{ env.binary_path }}

      - name: sha256sum
        run: |
          printf '%s' https://www.virustotal.com/gui/file/$(sha256sum ${{ env.binary_path }} | awk '{print $1}') > ${{ matrix.name }}-${{ matrix.arch }}.url
          cat ${{ matrix.name }}-${{ matrix.arch }}.url

      - name: Create tag env
        run: printf '%s\n' "release_tag=$(sed -rn 's|(.*)\[(.*)],\[https://github.com/esnet/iperf],(.*)|\2|p' ${{ matrix.name }}/configure.ac)" >> $GITHUB_ENV

      - name: Set tag env to output
        id: release_tags
        run: printf '%s\n' "release_tag=${{ env.release_tag }}" >> "$GITHUB_OUTPUT"

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: ${{ env.binary_path }}

      - name: "Create artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-${{ matrix.arch }}
          path: |
            ${{ env.binary_path }}
            ${{ matrix.name }}-${{ matrix.arch }}.url
