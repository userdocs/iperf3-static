name: Build iperf3 multi static via alpine

on:
  workflow_dispatch:
    inputs:
      source_repo:
        description: "Define the git repo used for the build"
        required: true
        default: "https://github.com/esnet/iperf.git"
      source_branch:
        description: "Specify the branch to build"
        required: true
        default: "master"
      artifacts_only:
        description: "No release - artifacts only"
        required: true
        default: false
        type: boolean
      skip_rerun:
        description: "Skip rerun?"
        required: true
        default: true
        type: boolean
      retries:
        description: "Number of rerun retries"
        required: true
        default: "1"
        type: choice
        options: ["1", "2", "3", "4", "5", "6", "7", "8", "9"]

permissions:
  id-token: write
  contents: read
  attestations: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      set-tag: ${{ steps.set-tag.outputs.release_tag }}
    strategy:
      fail-fast: false
      matrix:
        name: [iperf3]
        os_id: [alpine]
        os_version_id: [edge]
        arch: [amd64, arm32v6, arm32v7, arm64v8, i386, ppc64le, riscv64, s390x]
        include:
          - arch: amd64
            platform: linux/amd64

          - arch: arm32v6
            platform: linux/arm/v6

          - arch: arm32v7
            platform: linux/arm/v7

          - arch: arm64v8
            platform: linux/arm64

          - arch: i386
            platform: linux/i386

          - arch: ppc64le
            platform: linux/ppc64le

          - arch: riscv64
            platform: linux/riscv64

          - arch: s390x
            platform: linux/s390x

    name: ${{ matrix.name }} ${{ matrix.os_id }}:${{ matrix.os_version_id }} ${{ matrix.arch }}

    env:
      CDN: http://dl-cdn.alpinelinux.org/alpine/edge/main/
      CXXFLAGS: "--static -static"
      CPPFLAGS: "--static -static"
      LDFLAGS: "--static -static"

    steps:
      - uses: actions/checkout@v4

      - name: Docker multiarch bootstrap
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Create docker multiarch ${{ matrix.platform }} container
        run: docker run --name multiarch -it -d -w /root -e CXXFLAGS="${{ env.CXXFLAGS }}" -e CPPFLAGS="${{ env.CPPFLAGS }}" -e LDFLAGS="${{ env.LDFLAGS }}" --platform ${{ matrix.platform }} -v ${{ github.workspace }}:/root ${{ matrix.arch }}/${{ matrix.os_id }}:${{ matrix.os_version_id }}

      - name: Run apk update
        run: docker exec multiarch apk update --repository=${{ env.CDN }}

      - name: Run apk upgrade
        run: docker exec multiarch apk upgrade --repository=${{ env.CDN }}

      - name: Run apk to install the core build dependencies
        run: docker exec multiarch apk add build-base pkgconf autoconf automake curl libtool git tar curl perl openssl-dev openssl-libs-static linux-headers

      - name: Git clone ${{ matrix.name }}
        run: docker exec multiarch git clone --no-tags --single-branch --branch "${{ inputs.source_branch }}" --shallow-submodules --recurse-submodules -j"$(nproc)" --depth 1 "${{ inputs.source_repo }}" /root/${{ matrix.name }}

      - name: Configure ${{ matrix.name }}
        run: docker exec -w /root/${{ matrix.name }} multiarch ./configure --disable-shared --with-openssl=/usr --enable-static-bin --prefix=/root

      - name: Make Build ${{ matrix.name }}
        run: docker exec -w /root/${{ matrix.name }} multiarch make -j$(nproc)

      - name: Make Install Build ${{ matrix.name }}
        run: docker exec -w /root/${{ matrix.name }} multiarch make install

      - name: Rename ${{ matrix.name }} to ${{ matrix.name }}-${{ matrix.arch }}
        run: docker exec multiarch mv -f /root/bin/${{ matrix.name }} /root/${{ matrix.name }}-${{ matrix.arch }}

      - name: Create path to binary env
        run: echo "binary_path=${{ github.workspace }}/${{ matrix.name }}-${{ matrix.arch }}" >> $GITHUB_ENV

      - name: VirusTotal Scan
        id: virustotal
        uses: crazy-max/ghaction-virustotal@v4
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          files: ${{ env.binary_path }}

      - name: VirusTotal Analysis URLs
        run: echo ${{ steps.virustotal.outputs.analysis }} | cut -d '=' -f 2-4 >> ${{ matrix.name }}-${{ matrix.arch }}.url

      - name: Create tag env
        run: echo "release_tag=$(sed -rn 's|(.*)\[(.*)],\[https://github.com/esnet/iperf],(.*)|\2|p' ${{ matrix.name }}/configure.ac)" >> $GITHUB_ENV

      - name: Set tag env to output
        id: set-tag
        run: echo "release_tag=${{ env.release_tag }}" >> "$GITHUB_OUTPUT"

      - name: Generate artifact attestation  ${{ github.event.inputs.distinct_id }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: ${{ env.binary_path }}

      - name: "Create artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-${{ matrix.arch }} ${{ env.release_tag }}
          path: |
            ${{ env.binary_path }}
            ${{ matrix.name }}-${{ matrix.arch }}.url

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: build
    if: always() && contains(needs.*.result, 'success') && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: "release-artifacts"
          pattern: iperf3-*
          merge-multiple: true

      - name: Virustotal scan results
        run: |
          pushd release-artifacts || exit 1

          for virus_total_urls in iperf3-*\.url; do
            dependency_version+=("${virus_total_urls}")
          done

          readarray -t release_sorted < <(printf '%s\n' "${dependency_version[@]}" | sort)

          printf '%s\n\n' "## Virustotal scan results" >> "${{ github.workspace }}/release-body.md"

          for filenames in "${release_sorted[@]}"; do
            printf '%s\n\n' "[${filenames//\.url/}]($(
              head -1 "${filenames}" | tr -d '\n'
            ))" >> "${{ github.workspace }}/release-body.md"
            rm -f "${filenames}"
          done

      - name: "Publish release ${{ needs.build.outputs.set-tag }}"
        if: inputs.artifacts_only == '0'
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          artifacts: release-artifacts/iperf3-*
          replacesArtifacts: true
          tag: ${{ needs.build.outputs.set-tag }}
          name: iperf3 ${{ needs.build.outputs.set-tag }}
          allowUpdates: true
          bodyFile: release-body.md
          token: ${{ secrets.GITHUB_TOKEN }}

    name: "Publish iperf3 multi static via alpine release assets"

  rerun-on-failure:
    if: failure() && inputs.skip_rerun == '0'
    name: rerun-on-failure
    needs: release
    permissions:
      actions: write
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: "${{ github.TOKEN }}"
    steps:
      - uses: actions/checkout@v4
      - name: Trigger rerun workflow on job failures
        run: |
          inputs_retries="${{ inputs.retries }}"
          gh workflow run rerun.yml -f run_id=${{ github.run_id }} -f attempts=${{ github.run_attempt }} -f retries=${inputs_retries:-1}
